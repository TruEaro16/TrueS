#include <iostream>
#include <fstream>
#include <cmath>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    // Чтение COO матрицы из файла
    fstream file("C:\\Users\\stud\\Desktop\\Test_int.mtx", ios::in);
    if (!file.is_open()) {
        cout << "Matrix file not open " << endl;
        return EXIT_FAILURE;
    }

    int n, m, nnz;
    file >> n >> m >> nnz;

    int* row = new int[nnz];
    int* col = new int[nnz];
    double* data = new double[nnz];

    for (int i = 0; i < nnz; ++i) {
        file >> row[i] >> col[i] >> data[i];
        row[i]--; // Преобразуем индексы из 1-based в 0-based
        col[i]--;
    }

    file.close();

    // Преобразование COO в CSR
    int* rowPtr = new int[n + 1]();
    int* colIdx = new int[nnz];
    double* values = new double[nnz];

    // Считаем количество элементов в каждой строке
    for (int i = 0; i < nnz; ++i) {
        rowPtr[row[i] + 1]++;
    }

    // Преобразуем rowPtr в указатели на начало строки
    for (int i = 0; i < n; ++i) {
        rowPtr[i + 1] += rowPtr[i];
    }

    // Заполняем colIdx и values
    for (int i = 0; i < nnz; ++i) {
        int r = row[i];
        int dest = rowPtr[r]++;
        colIdx[dest] = col[i];
        values[dest] = data[i];
    }

    // Восстанавливаем rowPtr
    for (int i = n; i > 0; --i) {
        rowPtr[i] = rowPtr[i - 1];
    }
    rowPtr[0] = 0;

    // Чтение вектора из файла
    fstream vecFile("C:\\Users\\stud\\Desktop\\BB.txt", ios::in);
    if (!vecFile.is_open()) {
        cout << "Vector file not open " << endl;
        delete[] row;
        delete[] col;
        delete[] data;
        delete[] rowPtr;
        delete[] colIdx;
        delete[] values;
        return EXIT_FAILURE;
    }

    double* b = new double[n];
    for (int i = 0; i < n; ++i) {
        vecFile >> b[i];
    }

    vecFile.close();

    // Ортогонализация методом Грама-Шмидта
    double* Q = new double[n * n]();
    double* R = new double[n * n]();

    for (int k = 0; k < n; ++k) {
        double* q = new double[n]();

        // Копируем значения из CSR матрицы в вектор q
        for (int i = rowPtr[k]; i < rowPtr[k + 1]; ++i) {
            q[colIdx[i]] = values[i];
        }

        // Ортогонализация
        for (int j = 0; j < k; ++j) {
            double r = 0.0;
            for (int i = 0; i < n; ++i) {
                r += Q[j * n + i] * q[i];
            }
            R[j * n + k] = r;
            for (int i = 0; i < n; ++i) {
                q[i] -= r * Q[j * n + i];
            }
        }

        // Вычисление нормы и проверка на сингулярность
        double norm = 0.0;
        for (int i = 0; i < n; ++i) {
            norm += q[i] * q[i];
        }
        norm = sqrt(norm);

        // Если норма равна нулю, матрица сингулярна
        if (norm == 0) {
            cout << "Matrix is singular and cannot be orthogonalized." << endl;
            delete[] q;
            delete[] row;
            delete[] col;
            delete[] data;
            delete[] rowPtr;
            delete[] colIdx;
            delete[] values;
            delete[] b;
            delete[] Q;
            delete[] R;
            return EXIT_FAILURE;
        }
        R[k * n + k] = norm;
        for (int i = 0; i < n; ++i) {
            Q[k * n + i] = q[i] / norm;
        }

        delete[] q;
    }

    // Решение уравнения R * x = Q^T * b
    double* Qtb = new double[n]();
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            Qtb[i] += Q[j * n + i] * b[j];
        }
    }

    double* x = new double[n]();
    for (int i = n - 1; i >= 0; --i) {
        x[i] = Qtb[i];
        for (int j = i + 1; j < n; ++j) {
            x[i] -= R[i * n + j] * x[j];
        }
        x[i] /= R[i * n + i];
    }

    // Вывод решения
    cout << "Solution vector x:" << endl;
    for (int i = 0; i < n; ++i) {
        cout << x[i] << " ";
    }
    cout << endl;

    // Освобождение памяти
    delete[] row;
    delete[] col;
    delete[] data;
    delete[] rowPtr;
    delete[] colIdx;
    delete[] values;
    delete[] b;
    delete[] Q;
    delete[] R;
    delete[] Qtb;
    delete[] x;

    return 0;
}
