#include <iostream>
#include <fstream>
#include <cmath>


using namespace std;

int main() {
    // Чтение CSR матрицы из файла
    const char* matrixFile = "C:\\Users\\stud\\Desktop\\Test_int.mtx";
    fstream file(matrixFile);
    if (!file.is_open()) {
        cout << "Matrix file not open "<< endl;
    }

    int n, nnz;
    file >> n >> nnz;

    int* rowPtr = new int[n + 1];
    int* colIdx = new int[nnz];
    double* values = new double[nnz];

    for (int i = 0; i <= n; ++i) {
        file >> rowPtr[i];
    }

    for (int i = 0; i < nnz; ++i) {
        file >> colIdx[i];
    }

    for (int i = 0; i < nnz; ++i) {
        file >> values[i];
    }

    file.close();

    // Чтение вектора из файла
    const char* vectorFile = "C:\\Users\\stud\\Desktop\\Test_int.mtx";
    fstream vecFile(vectorFile);
    if (!vecFile.is_open()) 
    {
        cout << "vector file not open "<<endl;
    }

    double* b = new double[n];
    for (int i = 0; i < n; ++i) {
        vecFile >> b[i];
    }

    vecFile.close();

    // Ортогонализация
    double* Q = new double[n * n];

    for (int k = 0; k < n; ++k) {
        double* q = new double[n];
        for (int i = 0; i < n; ++i) {
            q[i] = 0.0;
        }
        for (int i = rowPtr[k]; i < rowPtr[k + 1]; ++i) {
            q[colIdx[i]] = values[i];
        }

        for (int j = 0; j < k; ++j) {
            double r = 0.0;
            for (int i = 0; i < n; ++i) {
                r += Q[j * n + i] * q[i];
            }
            for (int i = 0; i < n; ++i) {
                q[i] -= r * Q[j * n + i];
            }
        }

        double norm = 0.0;
        for (int i = 0; i < n; ++i) {
            norm += q[i] * q[i];
        }
        norm = sqrt(norm);
        for (int i = 0; i < n; ++i) {
            Q[k * n + i] = q[i] / norm;
        }

      delete[] q;
    }

    // Освобождение памяти
    delete[] rowPtr;
    delete[] colIdx;
    delete[] values;
    delete[] b;
    delete[] Q;

    return 0;
}
