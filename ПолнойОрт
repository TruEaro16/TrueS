#include <fstream>
#include <iostream>
#include <cmath>
#include <iomanip>

using namespace std;

int main() {
    setlocale(LC_ALL, "Russian");
    fstream f, br;
    f.open("C:\\Users\\sava\\Desktop\\Test_int.mtx");
    br.open("C:\\Users\\sava\\Desktop\\BB.txt");

    if (!f.is_open() || !br.is_open()) {
        cout << "Ошибка открытия файла." << endl;
        return -1;
    }

    int n, m, Nenol;
    f >> n >> m >> Nenol;

    double* AV = new double[Nenol]();
    int* numCols = new int[Nenol]();
    int* numRows = new int[Nenol]();
    double* b = new double[n]();
    double* x = new double[n]();
    double* A = new double[n * n](); // Матрица A в плотном формате для удобства

    // Чтение вектора b из файла
    for (int i = 0; i < n; i++) {
        if (!(br >> b[i])) {
            cout << "b не считался." << endl;
            return -1;
        }
    }

    // Чтение матрицы в CSR формате и преобразование в плотный формат
    for (int i = 0; i < Nenol; i++) {
        f >> numRows[i] >> numCols[i] >> AV[i];
        numRows[i]--; // Переводим в нумерацию с 0
        numCols[i]--;
        A[numRows[i] * n + numCols[i]] = AV[i];
    }

    f.close();
    br.close();

    // Вывод массивов AV, numRows и numCols
    cout << "Массив AV: ";
    for (int i = 0; i < Nenol; i++) {
        cout << AV[i] << " ";
    }
    cout << endl;

    cout << "Массив numRows: ";
    for (int i = 0; i < Nenol; i++) {
        cout << numRows[i] << " ";
    }
    cout << endl;

    cout << "Массив numCols: ";
    for (int i = 0; i < Nenol; i++) {
        cout << numCols[i] << " ";
    }
    cout << endl;

    // Вывод матрицы в плотном формате
    cout << "Матрица A в плотном формате:" << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cout << setw(10) << A[i * n + j] << " ";
        }
        cout << endl;
    }

    // Параметры метода сопряженных градиентов
    int max_iter = n;
    double tol = 1e-6;

    double* r = new double[n]();
    double* p = new double[n]();
    double* Ap = new double[n]();

    // Инициализация
    for (int i = 0; i < n; i++) {
        x[i] = 0.0; // Начальное приближение x = 0
    }

    // r = b - A * x (начальный остаток)
    for (int i = 0; i < n; i++) {
        r[i] = b[i];
        for (int j = 0; j < n; j++) {
            r[i] -= A[i * n + j] * x[j];
        }
    }

    // p = r (начальное направление)
    for (int i = 0; i < n; i++) {
        p[i] = r[i];
    }

    double rsold = 0.0;
    for (int i = 0; i < n; i++) {
        rsold += r[i] * r[i];
    }

    for (int iter = 0; iter < max_iter; iter++) {
        // Ap = A * p
        for (int i = 0; i < n; i++) {
            Ap[i] = 0.0;
            for (int j = 0; j < n; j++) {
                Ap[i] += A[i * n + j] * p[j];
            }
        }

        double alpha = rsold;
        double temp = 0.0;
        for (int i = 0; i < n; i++) {
            temp += p[i] * Ap[i];
        }
        alpha /= temp;

        // x = x + alpha * p
        for (int i = 0; i < n; i++) {
            x[i] += alpha * p[i];
        }

        // r = r - alpha * Ap
        for (int i = 0; i < n; i++) {
            r[i] -= alpha * Ap[i];
        }

        double rsnew = 0.0;
        for (int i = 0; i < n; i++) {
            rsnew += r[i] * r[i];
        }

        if (sqrt(rsnew) < tol) {
            cout << "Сошлось после " << iter + 1 << " итераций." << endl;
            break;
        }

        // p = r + (rsnew / rsold) * p
        for (int i = 0; i < n; i++) {
            p[i] = r[i] + (rsnew / rsold) * p[i];
        }

        rsold = rsnew;
    }

    // Вывод решения
    cout << "Результат x:" << endl;
    for (int i = 0; i < n; i++) {
        cout << x[i] << " ";
    }
    cout << endl;

    // Освобождение памяти
    delete[] AV;
    delete[] numCols;
    delete[] numRows;
    delete[] b;
    delete[] x;
    delete[] A;
    delete[] r;
    delete[] p;
    delete[] Ap;

    return 0;
}
