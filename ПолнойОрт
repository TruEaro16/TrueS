#include <iostream>
#include <fstream>
#include <cmath>

using namespace std;

int main() {
    // Чтение CSR матрицы из файла
    fstream file;
    file.open("C:\\Users\\stud\\Desktop\\Test_int.mtx");
    if (!file.is_open()) {
        cout << "Matrix file not open " << endl;
        return EXIT_FAILURE;
    }

    int n, nnz;
    file >> n >> nnz;

    int* rowPtr = new int[n + 1];
    int* colIdx = new int[nnz];
    double* values = new double[nnz];

    for (int i = 0; i <= n; ++i) {
        file >> rowPtr[i];
    }

    for (int i = 0; i < nnz; ++i) {
        file >> colIdx[i];
    }

    for (int i = 0; i < nnz; ++i) {
        file >> values[i];
    }

    file.close();

    // Чтение вектора из файла
    fstream vecFile;
    vecFile.open("C:\\Users\\stud\\Desktop\\BB.txt");
    if (!vecFile.is_open()) {
        cout << "Vector file not open " << endl;
        delete[] rowPtr;
        delete[] colIdx;
        delete[] values;
        return EXIT_FAILURE;
    }

    double* b = new double[n];
    for (int i = 0; i < n; ++i) {
        vecFile >> b[i];
    }

    vecFile.close();

    // Ортогонализация методом Грама-Шмидта
    double* Q = new double[n * n];
    double* R = new double[n * n];

    for (int i = 0; i < n * n; ++i) {
        Q[i] = 0.0;
        R[i] = 0.0;
    }

    for (int k = 0; k < n; ++k) {
        double* q = new double[n]();

        for (int i = rowPtr[k]; i < rowPtr[k + 1]; ++i) {
            q[colIdx[i]] = values[i];
        }

        for (int j = 0; j < k; ++j) {
            double r = 0.0;
            for (int i = 0; i < n; ++i) {
                r += Q[j * n + i] * q[i];
            }
            R[j * n + k] = r;
            for (int i = 0; i < n; ++i) {
                q[i] -= r * Q[j * n + i];
            }
        }

        double norm = 0.0;
        for (int i = 0; i < n; ++i) {
            norm += q[i] * q[i];
        }
        norm = sqrt(norm);
        R[k * n + k] = norm;
        for (int i = 0; i < n; ++i) {
            Q[k * n + i] = q[i] / norm;
        }

        delete[] q;
    }

    // Решение уравнения R * x = Q^T * b
    double* Qtb = new double[n];
    for (int i = 0; i < n; ++i) {
        Qtb[i] = 0.0;
        for (int j = 0; j < n; ++j) {
            Qtb[i] += Q[j * n + i] * b[j];
        }
    }

    double* x = new double[n];
    for (int i = n - 1; i >= 0; --i) {
        x[i] = Qtb[i];
        for (int j = i + 1; j < n; ++j) {
            x[i] -= R[i * n + j] * x[j];
        }
        x[i] /= R[i * n + i];
    }

    // Вывод решения
    cout << "Solution vector x:" << endl;
    for (int i = 0; i < n; ++i) {
        cout << x[i] << " ";
    }
    cout << endl;

    // Освобождение памяти
    delete[] rowPtr;
    delete[] colIdx;
    delete[] values;
    delete[] b;
    delete[] Q;
    delete[] R;
    delete[] Qtb;
    delete[] x;

    return 0;
}
