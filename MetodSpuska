#include <iostream>
#include <fstream>
#include <cmath>

// Функция для умножения матрицы в формате CSR на вектор
double* multiply(int n, double* values, int* col_indices, int* row_ptr, double* vec) {
    double* result = new double[n];
    for (int i = 0; i < n; i++) {
        result[i] = 0.0;
        for (int j = row_ptr[i]; j < row_ptr[i + 1]; j++) {
            result[i] += values[j] * vec[col_indices[j]];
        }
    }
    return result;
}

// Функция для вычитания двух векторов
double* subtract(int n, double* a, double* b) {
    double* result = new double[n];
    for (int i = 0; i < n; i++) {
        result[i] = a[i] - b[i];
    }
    return result;
}

// Функция для скалярного произведения двух векторов
double dotProduct(int n, double* a, double* b) {
    double result = 0.0;
    for (int i = 0; i < n; i++) {
        result += a[i] * b[i];
    }
    return result;
}

// Функция метода наискорейшего спуска
double* steepestDescent(int n, double* values, int* col_indices, int* row_ptr, double* b, int& iterations) {
    double* x = new double[n]();
    double* r = subtract(n, b, multiply(n, values, col_indices, row_ptr, x));
    double* p;
    double alpha, rsold, rsnew;

    iterations = 0;
    while (true) {
        p = r;
        double* Ap = multiply(n, values, col_indices, row_ptr, p);
        rsold = dotProduct(n, r, r);
        alpha = rsold / dotProduct(n, p, Ap);
        
        for (int i = 0; i < n; i++) {
            x[i] += alpha * p[i];
        }
        double* r_new = subtract(n, r, multiply(n, values, col_indices, row_ptr, p));
        rsnew = dotProduct(n, r_new, r_new);
        if (sqrt(rsnew) < 1e-10) { // условие сходимости
            delete[] r_new;
            break;
        }
        delete[] r;
        r = r_new;
        delete[] Ap;
        iterations++;
    }
    delete[] r;
    return x;
}

// Главная функция
int main() {
    std::ifstream file_matrix("matrix.txt"), file_vector("vector.txt");
    int n, num_values;

    if (!file_matrix.is_open() || !file_vector.is_open()) {
        std::cerr << "Не удалось открыть файлы" << std::endl;
        return -1;
    }

    file_matrix >> n >> num_values;
    double* values = new double[num_values];
    int* col_indices = new int[num_values];
    int* row_ptr = new int[n + 1];
    double* b = new double[n];

    for (int i = 0; i <= n; i++) {
        file_matrix >> row_ptr[i];
    }
    for (int i = 0; i < num_values; i++) {
        file_matrix >> col_indices[i];
    }
    for (int i = 0; i < num_values; i++) {
        file_matrix >> values[i];
    }
    for (int i = 0; i < n; i++) {
        file_vector >> b[i];
    }

    int iterations;
    double* solution = steepestDescent(n, values, col_indices, row_ptr, b, iterations);

    std::cout << "Решение:" << std::endl;
    for (int i = 0; i < n; i++) {
        std::cout << solution[i] << " ";
    }
    std::cout << "\nКоличество итераций: " << iterations << std::endl;

    // Освобождение памяти
    delete[] values;
    delete[] col_indices;
    delete[] row_ptr;
    delete[] b;
    delete[] solution;

    file_matrix.close();
    file_vector.close();
    return 0;
}
