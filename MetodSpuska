#include <iostream>
#include <fstream>
#include <cmath>

// Функция для чтения CSR матрицы из файла
void readCSRMatrix(const char* filename, int& n, int& nnz, int*& rowPtr, int*& colIdx, double*& values) {
    std::ifstream file(filename);
    if (!file.is_open()) {
        std::cerr << "Error opening file: " << filename << std::endl;
        exit(EXIT_FAILURE);
    }

    file >> n >> nnz;

    rowPtr = new int[n + 1];
    colIdx = new int[nnz];
    values = new double[nnz];

    for (int i = 0; i <= n; ++i) {
        file >> rowPtr[i];
    }

    for (int i = 0; i < nnz; ++i) {
        file >> colIdx[i];
    }

    for (int i = 0; i < nnz; ++i) {
        file >> values[i];
    }

    file.close();
}

// Функция для чтения вектора из файла
void readVector(const char* filename, int n, double*& vec) {
    std::ifstream file(filename);
    if (!file.is_open()) {
        std::cerr << "Error opening file: " << filename << std::endl;
        exit(EXIT_FAILURE);
    }

    vec = new double[n];
    for (int i = 0; i < n; ++i) {
        file >> vec[i];
    }

    file.close();
}

// Функция для копирования столбца из CSR матрицы в вектор
void copyColumnFromCSR(int colIndex, int n, const int* rowPtr, const int* colIdx, const double* values, double* colVector) {
    for (int i = 0; i < n; ++i) {
        colVector[i] = 0.0;
    }
    for (int i = rowPtr[colIndex]; i < rowPtr[colIndex + 1]; ++i) {
        colVector[colIdx[i]] = values[i];
    }
}

// Функция для вычисления нормы вектора
double vectorNorm(int n, const double* vec) {
    double sum = 0.0;
    for (int i = 0; i < n; ++i) {
        sum += vec[i] * vec[i];
    }
    return std::sqrt(sum);
}

// Функция для вычисления скалярного произведения двух векторов
double dotProduct(int n, const double* vec1, const double* vec2) {
    double sum = 0.0;
    for (int i = 0; i < n; ++i) {
        sum += vec1[i] * vec2[i];
    }
    return sum;
}

// Функция для ортогонализации матрицы методом полной ортогонализации Грама-Шмидта
void modifiedGramSchmidt(int n, int nnz, const int* rowPtr, const int* colIdx, double* values, double*& Q) {
    Q = new double[n * n];

    for (int k = 0; k < n; ++k) {
        double* q = new double[n];
        copyColumnFromCSR(k, n, rowPtr, colIdx, values, q);

        for (int j = 0; j < k; ++j) {
            double r = dotProduct(n, &Q[j * n], q);
            for (int i = 0; i < n; ++i) {
                q[i] -= r * Q[i * n + j];
            }
        }

        double norm = vectorNorm(n, q);
        for (int i = 0; i < n; ++i) {
            Q[i * n + k] = q[i] / norm;
        }

        delete[] q;
    }
}

int main() {
    int n, nnz;
    int* rowPtr;
    int* colIdx;
    double* values;

    // Считываем матрицу из файла
    readCSRMatrix("test_int", n, nnz, rowPtr, colIdx, values);

    double* b;
    // Считываем вектор из файла
    readVector("BB", n, b);

    double* Q;

    // Ортогонализация матрицы
    modifiedGramSchmidt(n, nnz, rowPtr, colIdx, values, Q);

    // Освобождение памяти
    delete[] rowPtr;
    delete[] colIdx;
    delete[] values;
    delete[] b;
    delete[] Q;

    return 0;
}
