#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <sstream>
#include <locale>

using namespace std;

// Структура для хранения узла сетки
struct Node {
    int id;      // Номер узла
    double x, y, z; // Координаты узла
};

// Структура для хранения элемента сетки
struct Element {
    int id;                   // Номер элемента
    int type;                 // Тип элемента (например, треугольник, четырехугольник и т. д.)
    vector<int> node_ids;     // Индексы узлов, образующих элемент
};

// Класс для обработки файла .msh
class Mesh {
public:
    vector<Node> nodes;       // Вектор узлов
    vector<Element> elements; // Вектор элементов

    // Функция чтения файла .msh
    void readMshFile(const string& filename) {
        ifstream file(filename);
        if (!file) {
            cerr << "Ошибка: Не удалось открыть файл " << filename << endl;
            return;
        }

        string line;
        bool readingNodes = false;
        bool readingElements = false;

        while (getline(file, line)) {
            if (line.find("$Nodes") != string::npos) {
                readingNodes = true;
                continue;
            }
            if (line.find("$EndNodes") != string::npos) {
                readingNodes = false;
                continue;
            }
            if (line.find("$Elements") != string::npos) {
                readingElements = true;
                continue;
            }
            if (line.find("$EndElements") != string::npos) {
                readingElements = false;
                continue;
            }

            if (readingNodes) {
                stringstream ss(line);
                Node node;
                ss >> node.id >> node.x >> node.y >> node.z;
                nodes.push_back(node);
            }
            if (readingElements) {
                stringstream ss(line);
                Element element;
                int num_tags;
                ss >> element.id >> element.type >> num_tags;
                int temp;
                for (int i = 0; i < num_tags; ++i) {
                    ss >> temp; // Пропускаем теги
                }
                while (ss >> temp) {
                    element.node_ids.push_back(temp);
                }
                elements.push_back(element);
            }
        }

        file.close();
        cout << "Файл " << filename << " успешно прочитан." << endl;
        cout << "Количество узлов: " << nodes.size() << endl;
        cout << "Количество элементов: " << elements.size() << endl;
    }

    // Функция для отображения информации о загруженной сетке
    void displayMeshInfo() {
        cout << "Информация о загруженной сетке:" << endl;
        cout << "Узлы:" << endl;
        for (const auto& node : nodes) {
            cout << "ID: " << node.id << " Координаты: (" << node.x << ", " << node.y << ", " << node.z << ")" << endl;
        }

        cout << "Элементы:" << endl;
        for (const auto& element : elements) {
            cout << "ID: " << element.id << " Тип: " << element.type << " Узлы: ";
            for (int node_id : element.node_ids) {
                cout << node_id << " ";
            }
            cout << endl;
        }
    }
};

int main() {
    setlocale(LC_ALL, "Russian");

    string filename = "/mnt/data/sava1.msh"; // Укажи правильный путь
    Mesh mesh;
    mesh.readMshFile(filename);
    mesh.displayMeshInfo();

    return 0;
}
