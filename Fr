#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <vector>
#include <algorithm>

struct Point {
    double x, y, z;
};

// Функция для чтения файла VTU
bool readVTUFile(const std::string& filename, std::vector<Point>& points) {
    std::ifstream file(filename);
    if (!file.is_open()) {
        std::cerr << "Не удалось открыть файл " << filename << std::endl;
        return false;
    }

    std::string line;
    bool readingPoints = false;

    while (std::getline(file, line)) {
        if (line.find("<Points>") != std::string::npos) {
            readingPoints = true;
        } else if (line.find("</Points>") != std::string::npos) {
            readingPoints = false;
        }

        if (readingPoints) {
            if (line.find("<DataArray") != std::string::npos) {
                std::string coordinates;
                while (std::getline(file, line) && line.find("</DataArray>") == std::string::npos) {
                    coordinates += line;
                }

                std::stringstream ss(coordinates);
                double x, y, z;
                while (ss >> x >> y >> z) {
                    points.push_back({x, y, z});
                }
            }
        }
    }

    return true;
}

// Метод координатной биссекции для разбиения на две части по оси X
void bisectPoints(std::vector<Point>& points, double coordinate) {
    std::vector<Point> part1, part2;
    
    for (const auto& point : points) {
        if (point.x < coordinate) {
            part1.push_back(point);
        } else {
            part2.push_back(point);
        }
    }

    points = part1;  // Сохраняем одну из частей (можно модифицировать для других случаев)
}

// Функция для записи нового файла VTU с разбиением
void writeVTUFile(const std::string& filename, const std::vector<Point>& points) {
    std::ofstream file(filename);
    if (!file.is_open()) {
        std::cerr << "Не удалось открыть файл для записи " << filename << std::endl;
        return;
    }

    file << "<?xml version=\"1.0\"?>" << std::endl;
    file << "<VTKFile type=\"UnstructuredGrid\" version=\"0.1\" byte_order=\"LittleEndian\">" << std::endl;
    file << "<UnstructuredGrid>" << std::endl;
    file << "<Piece NumberOfPoints=\"" << points.size() << "\" NumberOfCells=\"0\">" << std::endl;
    file << "<Points>" << std::endl;
    file << "<DataArray type=\"Float64\" NumberOfComponents=\"3\" format=\"ascii\">" << std::endl;

    for (const auto& point : points) {
        file << point.x << " " << point.y << " " << point.z << std::endl;
    }

    file << "</DataArray>" << std::endl;
    file << "</Points>" << std::endl;
    file << "</Piece>" << std::endl;
    file << "</UnstructuredGrid>" << std::endl;
    file << "</VTKFile>" << std::endl;

    file.close();
}

int main() {
    std::string inputFile = "input.vtu";
    std::string outputFile = "output.vtu";

    // Шаг 1: Чтение данных из VTU файла
    std::vector<Point> points;
    if (!readVTUFile(inputFile, points)) {
        std::cerr << "Ошибка при чтении VTU файла!" << std::endl;
        return 1;
    }

    // Шаг 2: Разбиение по координате (например, по X)
    double bisectCoordinate = 0.5;  // Определим, на основе какого значения координаты X будем делить
    bisectPoints(points, bisectCoordinate);

    // Шаг 3: Запись в новый VTU файл
    writeVTUFile(outputFile, points);

    std::cout << "Файл успешно записан!" << std::endl;
    return 0;
}
