#include <iostream>
#include <variant>
#include <string>

using namespace std;

// Тип данных для хранения информации о студенте (имя, возраст, средний балл)
using StudentData = variant<string, int, double>;

// Функция для вывода информации о студенте в зависимости от переданного типа
void print_student_info(const StudentData& data) {
    if (holds_alternative<string>(data)) {
        cout << "Имя: " << get<string>(data) << endl;
    } else if (holds_alternative<int>(data)) {
        cout << "Возраст: " << get<int>(data) << endl;
    } else if (holds_alternative<double>(data)) {
        cout << "Средний балл: " << get<double>(data) << endl;
    }
}

int main() {
    StudentData name = "Иван Иванов";
    StudentData age = 20;
    StudentData avg_score = 4.5;

    print_student_info(name);      // Вывод имени
    print_student_info(age);       // Вывод возраста
    print_student_info(avg_score); // Вывод среднего балла

    return 0;
}


#include <iostream>
#include <tuple>
#include <string>

using namespace std;

int main() {
    // Создаем кортеж с информацией о студенте
    tuple<string, int, double> student = make_tuple("Иван Иванов", 20, 4.5);

    // Используем структурированные привязки для получения значений
    auto [name, age, avg_score] = student;

    // Выводим значения
    cout << "Имя: " << name << endl;
    cout << "Возраст: " << age << endl;
    cout << "Средний балл: " << avg_score << endl;

    return 0;
}

#include <iostream>
#include <map>
#include <string>

using namespace std;

int main() {
    // Карта для хранения информации о студентах (имя -> возраст)
    map<string, int> students = {{"Иван Иванов", 20}, {"Анна Петрова", 22}, {"Олег Сидоров", 19}};

    // Перебор элементов карты с использованием структурированных привязок
    for (const auto& [name, age] : students) {
        cout << "Имя: " << name << ", Возраст: " << age << endl;
    }

    return 0;
}
