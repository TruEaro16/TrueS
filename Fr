import numpy as np
import meshio


def load_vtu(file_path: str) -> meshio.Mesh:
    """Загружает VTU-файл и возвращает объект сетки."""
    return meshio.read(file_path)


def coordinate_bisection(points: np.ndarray) -> np.ndarray:
    """
    Выполняет разбиение сетки методом координатной биссекции.

    - Определяет ось с наибольшим разбросом координат.
    - Разделяет точки по средней координате вдоль этой оси.

    Возвращает массив меток разбиения (0 или 1).
    """
    min_coords = points.min(axis=0)
    max_coords = points.max(axis=0)
    axis = np.argmax(max_coords - min_coords)  # Выбор оси с наибольшим диапазоном
    median = np.median(points[:, axis])  # Находим среднее значение вдоль этой оси

    return (points[:, axis] >= median).astype(int)  # 0 - одна часть, 1 - другая


def split_mesh(mesh: meshio.Mesh) -> tuple[meshio.Mesh, meshio.Mesh]:
    """
    Разбивает входную сетку на две части методом координатной биссекции.

    Возвращает две новые сетки.
    """
    points = mesh.points
    cells = mesh.cells_dict["tetra"] if "tetra" in mesh.cells_dict else mesh.cells_dict["triangle"]

    labels = coordinate_bisection(points)

    # Разделяем элементы сетки по группам
    group1 = np.array([cell for cell in cells if labels[cell].mean() < 0.5])
    group2 = np.array([cell for cell in cells if labels[cell].mean() >= 0.5])

    mesh1 = meshio.Mesh(points=points, cells={"tetra": group1} if "tetra" in mesh.cells_dict else {"triangle": group1})
    mesh2 = meshio.Mesh(points=points, cells={"tetra": group2} if "tetra" in mesh.cells_dict else {"triangle": group2})

    return mesh1, mesh2


def save_vtu(mesh: meshio.Mesh, file_path: str) -> None:
    """Сохраняет сетку в VTU-файл."""
    meshio.write(file_path, mesh)


def main(input_file: str, output_file1: str, output_file2: str) -> None:
    """Главная функция: загружает VTU, выполняет разбиение и сохраняет результат."""
    mesh = load_vtu(input_file)
    mesh1, mesh2 = split_mesh(mesh)
    
    save_vtu(mesh1, output_file1)
    save_vtu(mesh2, output_file2)


if __name__ == "__main__":
    input_vtu = "input.vtu"  # Путь к входному файлу
    output_vtu1 = "output_part1.vtu"  # Первый выходной файл
    output_vtu2 = "output_part2.vtu"  # Второй выходной файл

    main(input_vtu, output_vtu1, output_vtu2)
